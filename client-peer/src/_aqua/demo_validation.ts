/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.2-303
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface DataProviderDef {
    delete_records: (password: string, callParams: CallParams<'password'>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
    get_record: (signature: string, callParams: CallParams<'signature'>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
    get_record_count: (callParams: CallParams<null>) => number | Promise<number>;
    get_records: (callParams: CallParams<null>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
}
export function registerDataProvider(service: DataProviderDef): void;
export function registerDataProvider(serviceId: string, service: DataProviderDef): void;
export function registerDataProvider(peer: FluencePeer, service: DataProviderDef): void;
export function registerDataProvider(peer: FluencePeer, serviceId: string, service: DataProviderDef): void;
       

export function registerDataProvider(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "DataProvider",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "delete_records" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "password" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "get_record" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "get_record_count" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    ]
                }
            },
            "get_records" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface ConsensusServiceDef {
    consensus: (validations: boolean[], threshold: number, callParams: CallParams<'validations' | 'threshold'>) => { stderr: string; stdout: { consensus: boolean; invalid: number; n: number; threshold: number; valid: number; }[]; } | Promise<{ stderr: string; stdout: { consensus: boolean; invalid: number; n: number; threshold: number; valid: number; }[]; }>;
}
export function registerConsensusService(service: ConsensusServiceDef): void;
export function registerConsensusService(serviceId: string, service: ConsensusServiceDef): void;
export function registerConsensusService(peer: FluencePeer, service: ConsensusServiceDef): void;
export function registerConsensusService(peer: FluencePeer, serviceId: string, service: ConsensusServiceDef): void;
       

export function registerConsensusService(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "ConsensusService",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "consensus" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "validations" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        },
                        "threshold" : {
                            "tag" : "scalar",
                            "name" : "f64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "Consensus",
                                        "fields" : {
                                            "n" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "invalid" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "valid" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "consensus" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "threshold" : {
                                                "tag" : "scalar",
                                                "name" : "f64"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface EIPValidatorDef {
    eip712_validation_string: (eip_str: string, peer_id: string, callParams: CallParams<'eip_str' | 'peer_id'>) => { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; } | Promise<{ stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }>;
    eip712_validation_url: (eip_str: string, peer_id: string, callParams: CallParams<'eip_str' | 'peer_id'>) => { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; } | Promise<{ stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }>;
}
export function registerEIPValidator(service: EIPValidatorDef): void;
export function registerEIPValidator(serviceId: string, service: EIPValidatorDef): void;
export function registerEIPValidator(peer: FluencePeer, service: EIPValidatorDef): void;
export function registerEIPValidator(peer: FluencePeer, serviceId: string, service: EIPValidatorDef): void;
       

export function registerEIPValidator(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "EIPValidator",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "eip712_validation_string" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "eip_str" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ValidationResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "struct",
                                    "name" : "EipResponse",
                                    "fields" : {
                                        "signature" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "validation" : {
                                            "tag" : "struct",
                                            "name" : "Response",
                                            "fields" : {
                                                "eip_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                },
                                                "peer_id" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "timestamp" : {
                                                    "tag" : "scalar",
                                                    "name" : "u64"
                                                },
                                                "ts_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "eip712_validation_url" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "eip_str" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ValidationResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "struct",
                                    "name" : "EipResponse",
                                    "fields" : {
                                        "signature" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "validation" : {
                                            "tag" : "struct",
                                            "name" : "Response",
                                            "fields" : {
                                                "eip_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                },
                                                "peer_id" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "timestamp" : {
                                                    "tag" : "scalar",
                                                    "name" : "u64"
                                                },
                                                "ts_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 
export type Get_recordResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function get_record(
    signature: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Get_recordResult>;

export function get_record(
    peer: FluencePeer,
    signature: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Get_recordResult>;

export function get_record(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                           )
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node ("DataProvider" "get_record") [signature] res)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_record",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Delete_recordsResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function delete_records(
    password: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Delete_recordsResult>;

export function delete_records(
    peer: FluencePeer,
    password: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Delete_recordsResult>;

export function delete_records(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "password") [] password)
                           )
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node ("DataProvider" "delete_records") [password] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "delete_records",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "password" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type ValidateResult = { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }
export function validate(
    eip712_url: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<ValidateResult>;

export function validate(
    peer: FluencePeer,
    eip712_url: string,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<ValidateResult>;

export function validate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "eip712_url") [] eip712_url)
                           )
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node ("EIPValidator" "eip712_validation_url") [eip712_url node] res)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "validate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "eip712_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "ValidationResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "struct",
                            "name" : "EipResponse",
                            "fields" : {
                                "signature" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "validation" : {
                                    "tag" : "struct",
                                    "name" : "Response",
                                    "fields" : {
                                        "eip_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "ts_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_record_count(
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_record_count(
    peer: FluencePeer,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_record_count(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node ("DataProvider" "get_record_count") [] res)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_record_count",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_recordsResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: string; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function get_records(
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Get_recordsResult>;

export function get_records(
    peer: FluencePeer,
    node: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Get_recordsResult>;

export function get_records(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node ("DataProvider" "get_records") [] res)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_records",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Eip_consensusResult = { stderr: string; stdout: { consensus: boolean; invalid: number; n: number; threshold: number; valid: number; }[]; }
export function eip_consensus(
    signature: string,
    locations: { node_id: string; relay_id: string; }[],
    service_node: string,
    consensus_service: string,
    threshold: number,
    config?: {ttl?: number}
): Promise<Eip_consensusResult>;

export function eip_consensus(
    peer: FluencePeer,
    signature: string,
    locations: { node_id: string; relay_id: string; }[],
    service_node: string,
    consensus_service: string,
    threshold: number,
    config?: {ttl?: number}
): Promise<Eip_consensusResult>;

export function eip_consensus(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                           )
                           (call %init_peer_id% ("getDataSrv" "locations") [] locations)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_node") [] service_node)
                         )
                         (call %init_peer_id% ("getDataSrv" "consensus_service") [] consensus_service)
                        )
                        (call %init_peer_id% ("getDataSrv" "threshold") [] threshold)
                       )
                       (new $result
                        (seq
                         (seq
                          (fold locations loc-0
                           (seq
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call loc-0.$.relay_id! ("op" "noop") [])
                             )
                             (xor
                              (seq
                               (call loc-0.$.node_id! ("DataProvider" "get_record") [signature] res)
                               (xor
                                (seq
                                 (seq
                                  (match res.$.stdout.[0].ts_validation! true
                                   (ap true $result)
                                  )
                                  (call loc-0.$.relay_id! ("op" "noop") [])
                                 )
                                 (call -relay- ("op" "noop") [])
                                )
                                (seq
                                 (seq
                                  (ap false $result)
                                  (call loc-0.$.relay_id! ("op" "noop") [])
                                 )
                                 (call -relay- ("op" "noop") [])
                                )
                               )
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                            )
                            (next loc-0)
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call service_node (consensus_service "consensus") [$result threshold] consensus)
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [consensus])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "eip_consensus",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "locations" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "EIPLocation",
                        "fields" : {
                            "node_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "relay_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "service_node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "consensus_service" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "threshold" : {
                    "tag" : "scalar",
                    "name" : "f64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Consensus",
                                "fields" : {
                                    "n" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "invalid" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "valid" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "consensus" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "threshold" : {
                                        "tag" : "scalar",
                                        "name" : "f64"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
