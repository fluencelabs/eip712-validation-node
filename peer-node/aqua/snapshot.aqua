data Response:
    peer_id: string
    timestamp: u64
    eip_validation: bool
    ts_validation: bool

data EipResponse:
    signature: string
    validation: Response

data ValidationResult:
    stderr: string
    stdout: EipResponse


data DBRecord:
    signature: u64
    event_address: string
    eip712_doc: string
    peer_id: string
    timestamp: u64
    eip_validation: bool
    ts_validation: bool
    signed_response: string

data DBResult:
    stderr: string
    stdout: []DBRecord

service EIPValidator("snapshot"):
    eip712_validation_string(eip_str: string, peer_id: string) -> ValidationResult
    eip712_validation_url(eip_str: string, peer_id: string) -> ValidationResult

service DataProvider("snapshot"):
    get_records() -> DBResult
    get_record(signnature: string) -> DBResult
    get_record_count() -> u64
    delete_records(password: string) -> DBResult

func validate(relay: string, peer:string, eip712_json: string) -> ValidationResult:
    on peer via relay:
        result <- EIPValidator.eip712_validation_string(eip712_json, peer)        
    <- result

func validate_from_url(relay: string, peer:string, eip712_url: string) -> ValidationResult:
    on peer via relay:
        result <- EIPValidator.eip712_validation_url(eip712_url, peer)        
    <- result

func get_record(relay:string, peer:string, signature: string) -> DBResult:
    on peer via relay:
        result <- DataProvider.get_record(signature)
    <- result

func get_records(relay:string, peer:string) -> DBResult:
    on peer via relay:
        result <- DataProvider.get_records()
    <- result

func get_count(relay:string, peer:string) -> u64:
    on peer via relay:
        result <- DataProvider.get_record_count()
    <- result

func delete_records(passwd: string, peer: string, relay:string) -> DBResult:
    on peer via relay:
        result <- DataProvider.delete_records(passwd)
    <- result