/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.1-374
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface DataProviderDef {
    delete_records: (password: string, callParams: CallParams$$<'password'>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
    get_record: (signnature: string, callParams: CallParams$$<'signnature'>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
    get_record_count: (callParams: CallParams$$<null>) => number | Promise<number>;
    get_records: (callParams: CallParams$$<null>) => { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; } | Promise<{ stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }>;
}
export function registerDataProvider(service: DataProviderDef): void;
export function registerDataProvider(serviceId: string, service: DataProviderDef): void;
export function registerDataProvider(peer: FluencePeer, service: DataProviderDef): void;
export function registerDataProvider(peer: FluencePeer, serviceId: string, service: DataProviderDef): void;
       

export function registerDataProvider(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "snapshot",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "delete_records" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "password" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "get_record" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "signnature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "get_record_count" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    ]
                }
            },
            "get_records" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "DBResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "DBRecord",
                                        "fields" : {
                                            "event_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "timestamp" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "signature" : {
                                                "tag" : "scalar",
                                                "name" : "u64"
                                            },
                                            "peer_id" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "signed_response" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "eip712_doc" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "ts_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "eip_validation" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface EIPValidatorDef {
    eip712_validation_string: (eip_str: string, peer_id: string, callParams: CallParams$$<'eip_str' | 'peer_id'>) => { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; } | Promise<{ stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }>;
    eip712_validation_url: (eip_str: string, peer_id: string, callParams: CallParams$$<'eip_str' | 'peer_id'>) => { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; } | Promise<{ stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }>;
}
export function registerEIPValidator(service: EIPValidatorDef): void;
export function registerEIPValidator(serviceId: string, service: EIPValidatorDef): void;
export function registerEIPValidator(peer: FluencePeer, service: EIPValidatorDef): void;
export function registerEIPValidator(peer: FluencePeer, serviceId: string, service: EIPValidatorDef): void;
       

export function registerEIPValidator(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "snapshot",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "eip712_validation_string" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "eip_str" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ValidationResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "struct",
                                    "name" : "EipResponse",
                                    "fields" : {
                                        "signature" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "validation" : {
                                            "tag" : "struct",
                                            "name" : "Response",
                                            "fields" : {
                                                "eip_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                },
                                                "peer_id" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "timestamp" : {
                                                    "tag" : "scalar",
                                                    "name" : "u64"
                                                },
                                                "ts_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "eip712_validation_url" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "eip_str" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ValidationResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "struct",
                                    "name" : "EipResponse",
                                    "fields" : {
                                        "signature" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "validation" : {
                                            "tag" : "struct",
                                            "name" : "Response",
                                            "fields" : {
                                                "eip_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                },
                                                "peer_id" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "timestamp" : {
                                                    "tag" : "scalar",
                                                    "name" : "u64"
                                                },
                                                "ts_validation" : {
                                                    "tag" : "scalar",
                                                    "name" : "bool"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 
export type Validate_from_urlResult = { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }
export function validate_from_url(
    relay: string,
    peer_: string,
    eip712_url: string,
    config?: {ttl?: number}
): Promise<Validate_from_urlResult>;

export function validate_from_url(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    eip712_url: string,
    config?: {ttl?: number}
): Promise<Validate_from_urlResult>;

export function validate_from_url(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                          )
                          (call %init_peer_id% ("getDataSrv" "eip712_url") [] eip712_url)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "eip712_validation_url") [eip712_url peer] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "validate_from_url",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "eip712_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "ValidationResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "struct",
                            "name" : "EipResponse",
                            "fields" : {
                                "signature" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "validation" : {
                                    "tag" : "struct",
                                    "name" : "Response",
                                    "fields" : {
                                        "eip_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "ts_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_count(
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_count(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_count(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "get_record_count") [] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_count",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_recordResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function get_record(
    relay: string,
    peer_: string,
    signature: string,
    config?: {ttl?: number}
): Promise<Get_recordResult>;

export function get_record(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    signature: string,
    config?: {ttl?: number}
): Promise<Get_recordResult>;

export function get_record(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                          )
                          (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "get_record") [signature] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_record",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Delete_recordsResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function delete_records(
    passwd: string,
    peer_: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Delete_recordsResult>;

export function delete_records(
    peer: FluencePeer,
    passwd: string,
    peer_: string,
    relay: string,
    config?: {ttl?: number}
): Promise<Delete_recordsResult>;

export function delete_records(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "passwd") [] passwd)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                          )
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "delete_records") [passwd] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "delete_records",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "passwd" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type ValidateResult = { stderr: string; stdout: { signature: string; validation: { eip_validation: boolean; peer_id: string; timestamp: number; ts_validation: boolean; }; }; }
export function validate(
    relay: string,
    peer_: string,
    eip712_json: string,
    config?: {ttl?: number}
): Promise<ValidateResult>;

export function validate(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    eip712_json: string,
    config?: {ttl?: number}
): Promise<ValidateResult>;

export function validate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                          )
                          (call %init_peer_id% ("getDataSrv" "eip712_json") [] eip712_json)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "eip712_validation_string") [eip712_json peer] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "validate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "eip712_json" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "ValidationResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "struct",
                            "name" : "EipResponse",
                            "fields" : {
                                "signature" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "validation" : {
                                    "tag" : "struct",
                                    "name" : "Response",
                                    "fields" : {
                                        "eip_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "ts_validation" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_recordsResult = { stderr: string; stdout: { eip712_doc: string; eip_validation: boolean; event_address: string; peer_id: string; signature: number; signed_response: string; timestamp: number; ts_validation: boolean; }[]; }
export function get_records(
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<Get_recordsResult>;

export function get_records(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<Get_recordsResult>;

export function get_records(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call relay ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call peer ("snapshot" "get_records") [] result)
                          (call relay ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call relay ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_records",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DBResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "DBRecord",
                                "fields" : {
                                    "event_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "signature" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "signed_response" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "eip712_doc" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "ts_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "eip_validation" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
